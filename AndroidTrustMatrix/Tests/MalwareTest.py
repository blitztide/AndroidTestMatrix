import hashlib
import zipfile
import datetime
import re
import requests
import time
from io import BytesIO
from bs4 import BeautifulSoup
import clamd

import AndroidTrustMatrix.config as Config
from AndroidTrustMatrix.Tests import BaseTest
from AndroidTrustMatrix.util import AndroidXMLDecompress

class MalwareTest(BaseTest):
    """Class for holding and running Market Tests"""
    def __init__(self,db,applist):
        super(MalwareTest,self).__init__(db)
        self.searchapps = applist
        self.availableapps = [] # List of pkg_names
        self.proxies = Config.get_proxy_config()
        self.clamd = clamd.ClamdUnixSocket(path="/var/run/clamav/clamd.sock")
    
    def Run(self,file):
        """Input is a file, output is a dict of results"""
        # Check filehash
        # Lookup in our own database (if found tag as such)
        # Check ClamAV locally
        # If not found, check VT
        # If not found, upload VT
        # Wait till next time
        # Dict Result {
        # "pkg_name": str
        # "md5sum":str
        # "sha1sum":str
        # "sha256sum":str
        # "isMalware":Boolean
        # "AppDate":DateTime
        # }
        Result = {}
        md5sum = hashlib.md5(file).digest()
        sha1sum = hashlib.sha1(file).digest()
        sha256sum = hashlib.sha256(file).digest()
        Result["md5sum"] = md5sum
        Result["sha1sum"] = sha1sum
        Result["sha256sum"] = sha256sum
        # Have we seen this before?
        clamresult = self.CheckClamAV(BytesIO(file,"rw"))
        if not clamresult:
            detection = self.CheckVT(sha256sum)
            if detection == None:
                self.UploadVT(file)
                new_detection = None
                while(new_detection == None):
                    time.sleep(30)
                    self.CheckVT(sha256sum)
            else:
                new_detection = detection

        if clamresult or new_detection:
            Result["isMalware"] = True
            print(f"Package {pkg_name} detected as Malicious")
        else:
            Result["isMalware"] = False
            print(f"Package {pkg_name} detected as Clean")
        AppDate,pkg_name = self.CheckFile(file)
        Result["pkg_name"] = pkg_name
        Result["AppDate"] = AppDate
        print(Result)
        return Result

    def CheckVT(self,sha256sum):
        """Checks filehash on VirusTotal, if not seen return None, otherwise return detections"""
        url = f"https://virustotal.com/old-browsers/file/{sha256sum}"
        # Common User agent to hide web scraping
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
        }
        response = requests.get(url,proxies=self.proxies,headers=headers)
        if response.status_code == requests.status_codes.codes.ok:
            soup = BeautifulSoup(response.text, 'html.parser')
            detections = soup.find_all(id="detections")
            total = int(detections.get_text().strip().split("/")[0])
        if response.status_code == 404:
            return None
        threshold = 3
        if total > threshold:
            return True
        else:
            return False

    def CheckClamAV(self,file):
        """Scans the file locally with ClamAV, returns True for isMalware"""
        result = self.clamd.instream(file)
        if result["stream"][0] == "FOUND":
            return True
        else:
            return False
    
    def UploadVT(self,file):
        """Uploads the file to VirusTotal"""
        files = {"suspect.apk",file}
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36",
            "Origin":"https://www.virustotal.com",
            "Referer":"https://www.virustotal.com/old-browsers/"
        }
        response = requests.post("https://www.virustotal.com/old-browsers/", files=files, headers=headers, proxies=self.proxies)
        if response.status_code == 302:
            return True
        else:
            return False

    def CheckFile(self,file):
        """Recieves file, extracts date and package name, returns str and datetimeobj"""
        package_regex = '<manifest [^>]+ package="([A-Za-z0-9\.-]+)"'
        if zipfile.zipfile.is_zipfile(file):
            archive = zipfile.ZipFile(file)
            AppDate = self.fixdate(archive.getinfo("AndroidManifest.xml").date_time)
            manifestFile = archive.open("AndroidManifest.xml")
            decoder = AndroidXMLDecompress()
            manifest = decoder.decompressXML(manifestFile.read())
            search = re.search(package_regex,manifest)
            pkg_name = search.group()
            print(manifest)
        return pkg_name,AppDate
    
    def fixdate(self,date):
        """Fix date returned by zipfile, return datetime object"""
        # Date is in tuple (Year,Month,Day,Hour,Minute,Second)
        year,month,day,hour,minute,second = date
        DatetimeObj = datetime.datetime(year,month,day,hour,minute,second)
        return DatetimeObj

