import hashlib
import zipfile
import datetime
import re
import requests
from bs4 import BeautifulSoup

import AndroidTrustMatrix.config as Config
from AndroidTrustMatrix.Tests import BaseTest
from AndroidTrustMatrix.util import AndroidXMLDecompress

class MalwareTest(BaseTest):
    """Class for holding and running Market Tests"""
    def __init__(self,db,applist):
        super(MalwareTest,self).__init__(db)
        self.searchapps = applist
        self.availableapps = [] # List of pkg_names
        self.proxies = Config.get_proxy_config()
    
    def run(self,file):
        """Input is a file, output is a dict of results"""
        # Check filehash
        # Lookup in our own database (if found tag as such)
        # If not found, check VT
        # If not found, check ClamAV
        # If not found, upload to VT
        # Check VT again
        # Dict Result {
        # "pkg_name": str
        # "md5sum":str
        # "sha1sum":str
        # "sha256sum":str
        # "isMalware":Boolean
        # "AppDate":DateTime
        # }
        Result = {}
        md5sum = hashlib.md5(file).digest()
        sha1sum = hashlib.sha1(file).digest()
        sha256sum = hashlib.sha256(file).digest()
        Result["md5sum"] = md5sum
        Result["sha1sum"] = sha1sum
        Result["sha256sum"] = sha256sum
        # Have we seen this before?
        detections = self.CheckVT(md5sum)
        if detections == None:
            clamresult = self.CheckClamAV(file)
            if not clamresult:
                self.UploadVT(file)
        # Wait for a bit
        detections = self.CheckVT(sha256sum)
        if detections >= 3:
            Result["isMalware"] = True
        else:
            Result["isMalware"] = False
        AppDate,pkg_name = self.CheckFile(file)
        Result["pkg_name"] = pkg_name
        Result["AppDate"] = AppDate
        return Result

    def CheckVT(self,sha256sum):
        """Checks filehash on VirusTotal, if not seen return None, otherwise return detections"""
        url = f"https://virustotal.com/old-browsers/file/{sha256sum}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
        }
        response = requests.get(url,proxies=self.proxies,headers=headers)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            detections = soup.find_all(id="detections")
        threshold = 3
        detections = 0
        if detections > threshold:
            return True
        else:
            return False

    def CheckClamAV(self,file):
        """Scans the file locally with ClamAV, returns True for isMalware"""
        return False
    
    def UploadVT(self,file):
        """Uploads the file to VirusTotal"""
        return
    def CheckFile(self,file):
        """Recieves file, extracts date and package name, returns str and datetimeobj"""
        package_regex = '<manifest [^>]+ package="([A-Za-z0-9\.-]+)"'
        if zipfile.zipfile.is_zipfile(file):
            archive = zipfile.ZipFile(file)
            AppDate = self.fixdate(archive.getinfo("AndroidManifest.xml").date_time)
            manifestFile = archive.open("AndroidManifest.xml")
            decoder = AndroidXMLDecompress()
            manifest = decoder.decompressXML(manifestFile.read())
            search = re.search(package_regex,manifest)
            pkg_name = search.group()
            print(manifest)
        return pkg_name,AppDate
    
    def fixdate(self,date):
        """Fix date returned by zipfile, return datetime object"""
        # Date is in tuple (Year,Month,Day,Hour,Minute,Second)
        year,month,day,hour,minute,second = date
        DatetimeObj = datetime.datetime(year,month,day,hour,minute,second)
        return DatetimeObj

